Gitとは
情報システム学科2年c1p31071 戸田皆吏

　Gitの創始者はLinus Torvaldsさんで開発を始めたのが2005年の春ごろです。三か月後にはgitの内部構造を熟知していない一般ユーザにも従物変えるようなシステムとなりました。Linus TorvaldsさんはLinuxの創始者です。このGitというものはLinuxのサービスが終了せざるを得なくなったためにLinuxをもとにして作り出したものになっています。Linuxカーネル開発のソース管理にはBitKeeperという反管理システムが用いられました。これは、BitMover社製の商用の版管理システムです。Bitkeeperhは、先進の分散型版管理システムでカーネルプロジェクトが採用した当時、オープンソースの世界にはこれに匹敵する分散型版管理システムはなく、また、カーネルプロジェクトで必要なワークフローには、分散型版管理システムの仕様が不可欠でした。
版管理システムの機能としては開発変更履歴を正確に記録すること、そして、その記録を元に、変更履歴に後から様々な調査を行えること、の2つがあります。つまり、コピペしたものに新しく書いていくという原始的かつファイルを作ったところまでにしか戻れないものから、変更してきた履歴を調べて、各々の段階で何が変わったかを検査できるようになったことが重要になっています。
　以上の変更履歴が記録された後で、その変更履歴をいかに効果的に利用できるかにかかわる版管理システムの機能ですが、そのためには、変更履歴を後で効果的に利用しやすいように記録することが必要です。
ひとたび版管理システムを使い始めると、いつでも以前の状態に戻れるようになりますが、ここで、以前の「状態」というものについても理解していく必要があります。組織立てて版管理しないと収集がつかないような文章とかプログラムとかは、単一のファイルではなくて、複数のファイルから構成されるのが普通です。プログラムでいえば、ヘッダファイルとソースコードとを管理したり、また、ホームページでいえば、HTMLファイルとCSSスタイルシートファイルとを管理したり、という具合です。このように複数のファイルから構成される全体を管理する場合には、1つのファイルだけを3H前の状態、もう1つのファイルを機能の上程に戻したのでは、つじつまの合わないことになります。ヘッダファイルにある関数宣言への因数の追加とソースコードにあるその関数定義の変更とか、CSSへの新しいクラス表示ルールの追加とHTMLでのそのクラスのstyleタグでの使用とか言った、複数のファイルにまたがる論理的な1つの変更を1つの単位として記録できることは、版管理システムにとって重要な機能の一つです。この特性は「コミットがアトミックである」と呼ばれることがあります。
版管理システムを使うことによって、以前の状態に戻ることができ、また、順次、どのような変更が行われてきたのかを調べることができるようになりますが、どうしてそういう変更が行われてきたのかを調べることができるようになりますが、どうしてそういう変更が行われたのかを知らないと仕事を先に進められないことはままあります。版管理システムでは複数のユーザが変更を行い、その変更を記録することができるけれど、文書にせよ、プログラムのソースコードにせよ、長い時間かけて変更が繰り返されて完成に至るのが常です。ある程度以上昔にした変更の理由は、たとえ自分がした変更であっても、完璧に覚えていられるはずもありません。なので版管理システムでは行った各々の変更のなぜとだれがとを変更内容を記録するのと同時に記録します。
　使い勝手上、版管理しないようがよい性質の情報もあります。何を管理して何を管理しないかを判断するのには、履歴とし本質的でない変更を記録しないというのを基本的な考え方とします。特にプロジェクト全体を管理する版管理システムの場合、履歴として本質的でない変更が起こるファイルを版管理の対象としてしまうと、新しい状態を記録しようとするたびごとに、本質的でない変更も記録されて、後で必要な変更点を見つけるのが大変になります。
　辞典ごとのプロジェクトの状態を記録したものを、リジョン(revision)とか、コミット(commit)とかいう言葉で呼びます。プロジェクトの開始以来のすべてのリビジョンを集めて記録しているデータベースを、リポジトリ(repository)と呼びます。リポジトリ内に記録されたリビジョン間の関連、どのリビジョンがもとになってほかのどのリビジョンが作られたのか、をまとめると、それがプロジェクトの歴史、となりますから、リポジトリはプロジェクトンお歴史を記録しているということができます。版管理システムでは、従来からあるCVSやSubversionのような集中型のシステムと、git、MonotoneやMercurialのような分散型のシステムとがあります。集中型のシステムには、プロジェクトの内容を見たり変更したるするすべての人が使うリポジンが1つだけ中央にあって、常にその勇逸のリポジトリをアクセスすることで以前の状態に戻る、とか履歴を調査するとか言ったすべての操作を行います。一方分散のシステムでは、ユーザー一人が個々にプロジェクトの歴史の自分専用のコピーを持ちます。以前の状態に、戻るとか、履歴を調査する、とか言った版管理システムに関する捜査は、すべてのユーザのローカルリポジトリ内で完結して、ほかのユーザのリポジトリやぽろじぇくと全体には影響を与えることはなく、また、こうした操作を行うには、ネットワーク接続を必要としません。分散型システムと集中型システムとの本質的な違いは、状態の記録と変更履歴の公開とが分離されて独立な操作となっていることです。
